# coding: utf-8

"""
    Payment Processor Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from paymentprocessor.models.paymentprocessor_get_available_payment_method_request import PaymentprocessorGetAvailablePaymentMethodRequest

class TestPaymentprocessorGetAvailablePaymentMethodRequest(unittest.TestCase):
    """PaymentprocessorGetAvailablePaymentMethodRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentprocessorGetAvailablePaymentMethodRequest:
        """Test PaymentprocessorGetAvailablePaymentMethodRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentprocessorGetAvailablePaymentMethodRequest`
        """
        model = PaymentprocessorGetAvailablePaymentMethodRequest()
        if include_optional:
            return PaymentprocessorGetAvailablePaymentMethodRequest(
                tenant_id = '',
                code = '',
                context = paymentprocessor.models.paymentprocessor_availability_context.paymentprocessorAvailabilityContext(
                    shipping_address = paymentprocessor.models.paymentprocessor_availability_context_postal_address.paymentprocessorAvailabilityContextPostalAddress(
                        region_code = '', 
                        postal_code = '', 
                        firstname = '', 
                        lastname = '', 
                        address_lines = [
                            ''
                            ], 
                        additional_info = paymentprocessor.models.additional_info.additionalInfo(), ), 
                    billing_address = paymentprocessor.models.paymentprocessor_availability_context_postal_address.paymentprocessorAvailabilityContextPostalAddress(
                        region_code = '', 
                        postal_code = '', 
                        firstname = '', 
                        lastname = '', 
                        additional_info = paymentprocessor.models.additional_info.additionalInfo(), ), 
                    customer = paymentprocessor.models.availability_context_customer.AvailabilityContextCustomer(
                        segments = [
                            ''
                            ], 
                        email = '', ), ),
                authenticate_method = True
            )
        else:
            return PaymentprocessorGetAvailablePaymentMethodRequest(
                tenant_id = '',
                code = '',
                context = paymentprocessor.models.paymentprocessor_availability_context.paymentprocessorAvailabilityContext(
                    shipping_address = paymentprocessor.models.paymentprocessor_availability_context_postal_address.paymentprocessorAvailabilityContextPostalAddress(
                        region_code = '', 
                        postal_code = '', 
                        firstname = '', 
                        lastname = '', 
                        address_lines = [
                            ''
                            ], 
                        additional_info = paymentprocessor.models.additional_info.additionalInfo(), ), 
                    billing_address = paymentprocessor.models.paymentprocessor_availability_context_postal_address.paymentprocessorAvailabilityContextPostalAddress(
                        region_code = '', 
                        postal_code = '', 
                        firstname = '', 
                        lastname = '', 
                        additional_info = paymentprocessor.models.additional_info.additionalInfo(), ), 
                    customer = paymentprocessor.models.availability_context_customer.AvailabilityContextCustomer(
                        segments = [
                            ''
                            ], 
                        email = '', ), ),
        )
        """

    def testPaymentprocessorGetAvailablePaymentMethodRequest(self):
        """Test PaymentprocessorGetAvailablePaymentMethodRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
