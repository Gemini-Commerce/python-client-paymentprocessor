# coding: utf-8

"""
    Payment Processor Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from paymentprocessor.models.payment_context_order_info import PaymentContextOrderInfo

class TestPaymentContextOrderInfo(unittest.TestCase):
    """PaymentContextOrderInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentContextOrderInfo:
        """Test PaymentContextOrderInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentContextOrderInfo`
        """
        model = PaymentContextOrderInfo()
        if include_optional:
            return PaymentContextOrderInfo(
                number = '',
                grn = '',
                items = [
                    paymentprocessor.models.paymentprocessor_item.paymentprocessorItem(
                        id = '', 
                        product_grn = '', 
                        qty_ordered = 56, 
                        qty_committed = 56, 
                        unit_sale_price = paymentprocessor.models.paymentprocessor_money.paymentprocessorMoney(
                            units = '', 
                            micros = 56, ), 
                        unit_list_price = paymentprocessor.models.paymentprocessor_money.paymentprocessorMoney(
                            units = '', 
                            micros = 56, ), 
                        unit_base_price = , 
                        unit_vat_amount = , 
                        row_sale_price = , 
                        row_list_price = , 
                        row_vat_amount = , 
                        discount_amount = , 
                        row_base_price = , 
                        vat_percentage = 1.337, 
                        vat_inaccurate = True, 
                        vat_calculated = True, 
                        product_name = '', 
                        product_code = '', 
                        product_sku = '', 
                        product_options = '', 
                        product_img = '', 
                        product_data = '', 
                        shipment_info_reference = '', 
                        promotion_grn = [
                            ''
                            ], 
                        product_is_virtual = True, )
                    ]
            )
        else:
            return PaymentContextOrderInfo(
                number = '',
                grn = '',
        )
        """

    def testPaymentContextOrderInfo(self):
        """Test PaymentContextOrderInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
