# coding: utf-8

"""
    Payment Processor Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from paymentprocessor.models.paymentprocessor_currency import PaymentprocessorCurrency
from paymentprocessor.models.paymentprocessor_localized_text import PaymentprocessorLocalizedText
from paymentprocessor.models.paymentprocessor_money import PaymentprocessorMoney
from paymentprocessor.models.paymentprocessor_payment_method_restriction import PaymentprocessorPaymentMethodRestriction
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaymentprocessorUpdatePaymentMethodRequest(BaseModel):
    """
    PaymentprocessorUpdatePaymentMethodRequest
    """ # noqa: E501
    tenant_id: StrictStr = Field(alias="tenantId")
    code: StrictStr
    title: Optional[PaymentprocessorLocalizedText] = None
    label: Optional[PaymentprocessorLocalizedText] = None
    enabled: Optional[StrictBool] = None
    amount: Optional[PaymentprocessorMoney] = None
    currency: Optional[PaymentprocessorCurrency] = None
    configuration: Optional[Dict[str, Any]] = None
    is_upfront: Optional[StrictBool] = Field(default=None, alias="isUpfront")
    description: Optional[PaymentprocessorLocalizedText] = None
    restrictions: Optional[List[PaymentprocessorPaymentMethodRestriction]] = None
    field_mask: Optional[StrictStr] = Field(default=None, alias="fieldMask")
    __properties: ClassVar[List[str]] = ["tenantId", "code", "title", "label", "enabled", "amount", "currency", "configuration", "isUpfront", "description", "restrictions", "fieldMask"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaymentprocessorUpdatePaymentMethodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label
        if self.label:
            _dict['label'] = self.label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item in self.restrictions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['restrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaymentprocessorUpdatePaymentMethodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "code": obj.get("code"),
            "title": PaymentprocessorLocalizedText.from_dict(obj.get("title")) if obj.get("title") is not None else None,
            "label": PaymentprocessorLocalizedText.from_dict(obj.get("label")) if obj.get("label") is not None else None,
            "enabled": obj.get("enabled"),
            "amount": PaymentprocessorMoney.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "currency": obj.get("currency"),
            "configuration": obj.get("configuration"),
            "isUpfront": obj.get("isUpfront"),
            "description": PaymentprocessorLocalizedText.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "restrictions": [PaymentprocessorPaymentMethodRestriction.from_dict(_item) for _item in obj.get("restrictions")] if obj.get("restrictions") is not None else None,
            "fieldMask": obj.get("fieldMask")
        })
        return _obj


